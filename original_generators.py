# 1) Генератор - это функции (выполняет свою работу)
# 2) Можно поставить на пауза, а потом вернутся
# 3) Генераторы сточки зрения передачи контроля выполнения программы.
# 4) Можем написать бесконечный генератор
# 5) После yield может быть другой код.
# 6) Может быть несколько yield
# 7) Сдвигает выполнение программы до следующего yield.


# Цикл событий по принципу round robin.
# В огороде сделали бассейн, выкопали яму, а вода есть только у соседей в бассейне. Задача сводится вычерпать воду из
# бассейна соседей и перелить к себе. Вы собрали друзей, выдали поведру поставили в очередь. Принцип round robin
# в том, что первый человек зачерпывает ведро с водой, выливает к вам в яму и встает в конец очереди и далее по кругу
# пока работа не будет выполнена.


from time import time


def gen_filename():
    """Пример бесконечного генератора для формирования названий изображений"""
    while True:
        pattern = 'file-{}.jpeg'
        t = int(time() *1000)
        yield pattern.format(str(t))

        sum = 234 + 234
        print(sum)


# g = gen_filename()


def gen1(s):
    for i in s:
        yield i


def gen2(n):
    for i in range(n):
        yield i


g1 = gen1('oleg')
g2 = gen2(4)

tasks = [g1, g2]

while tasks:
    # Интересно то, что pop() записывается в переменую, я думал pop() делает print() результата удаления,
    # а реально return
    task = tasks.pop(0)

    try:
        i = next(task)
        print(i)
        tasks.append(task)
    except StopIteration:
        pass